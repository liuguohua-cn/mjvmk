<html>
<title>Embedded real-time kernel integrating native and java threads</title>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
<META NAME="TITLE" CONTENT="Embedded real-time kerne; integrating native and java threads">
<META NAME="Keywords" CONTENT="Embedded Kernel, Embedded Operating System, Real time operating system, RTOS, Embedded Software, Embedded System, 
Embedded Device, Operating system, Embedded, Kernel, Real Time Kernel, Preemptive kernel, preemptive, ROMable, RAM, ROM, EPROM, EEPROM, Scalable, 
Ports, Microprocessor, Microcontroller, Context Switching, Task Switching, Task scheduling, Thread switching, thread scheduling, java, 
java micro edition, CLDC, connected limited device condifuration, connected device configuration, CDC, Mobile Information Device Profile, MIDP, DoJa, wireless, handset, cell phone, semiconductor, chip, phone, portable">
<link rel="stylesheet" type="text/css" href="style.css" title="master">
<link rel="prefetch" href="details.htm">
<link rel="prefetch" href="specs.htm">




<script>
var im1 = new Image();
var im2 = new Image();
var im3 = new Image();
var im4 = new Image();
im1.src = 'home2.gif';
im2.src = 'prod2.gif';
im3.src = 'spec2.gif';
im4.src = 'summary2.gif';



function switchIm(im, newSrc) {
	if(document.images != null)
		im.src=newSrc;
}

</script>


<body bgcolor=#ebeaf0 topmargin=0 leftmargin=0 marginwidth=0 marginheight=0>

<!-- div id=logo-->
<!-- img src=logo3.gif-->
<!-- /div-->




<table border=0 cellspacing=0 cellpadding=0 cols=4 rows=5 width=822>

<tr><td height=30 width=200 bgcolor=#ffffff valign=top align=right><img src=topleft3.gif></td>


<td bgcolor=#000000 width=526><img src=menul2.gif><a border=0 href="index.html" onMouseOver="switchIm(homeIm1, 'home2.gif');" onMouseOut="switchIm(homeIm1, 'home1.gif');"><img name=homeIm1 src=home1.gif border=0></a><a border=0 href="home.htm" onMouseOver="switchIm(summaryIm1, 'summary2.gif');" onMouseOut="switchIm(summaryIm1, 'summary1.gif');"><img name=summaryIm1 src=summary1.gif border=0></a><a border=0 href="details.htm" onMouseOver="switchIm(productIm1, 'prod2.gif');" onMouseOut="switchIm(productIm1, 'product1.gif');"><img src=product1.gif name=productIm1 border=0></a><a border=0 href="specs.htm" onMouseOver="switchIm(specsIm1, 'spec2.gif');" onMouseOut="switchIm(specsIm1, 'specs1.gif');"><img src=specs1.gif name=specsIm1 border=0></a><img src=menur2.gif></td>


<td width=46 bgcolor=#000000 valign=top>&nbsp;</td>
<td width=50 rowspan=5 bgcolor=#dbdae0>&nbsp;</td>
</tr>


<tr>
<td width=200 height=20 bgcolor=#ffffff align=left><spacer type=block width=1></td>
<td width=526 bgcolor=#ffffff align=left><spacer type=block width=1></td>
<td width=46 bgcolor=#000000 valign=top><img border=0 src=tittopr6.gif></td>
</tr>

<tr>
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!-- if extending the page length, increase as appropriate-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<td height=1330 bgcolor=#ffffff colspan=3>&nbsp;</td></tr>

<tr><td height=220 bgcolor=#ffffff colspan=3>&nbsp;</td></tr>

<tr>
<td colspan=3 align=center bgcolor=#dbdae0>
<br>

</td>
</tr>
</table>
<br>






<div id="leftNavBarSpecs">
<!------ left side navigation bar -------->

<table rows=5 cols=1 cellpadding=0 cellspacing=0 border=0>

<tr><td width=101><img src=bmenut5.gif name=topLowIm></td></tr>

<tr><td align=center bgcolor=#000000 valign=top>
<table width=81 rows=1 cols=4 cellpadding=0 cellspacing=0 border=0>
<tr>
<td width=1 bgcolor=#f4f400><spacer type=block width=1></td>
<td width=78>
<a href="index.html" onMouseOver="switchIm(homeIm2, 'home2.gif');" onMouseOut="switchIm(homeIm2, 'home1.gif');"><img border=0 name=homeIm2 src=home1.gif></a><br>
<a href="home.htm" onMouseOver="switchIm(sumaryIm2, 'summary2.gif');" onMouseOut="switchIm(summaryIm2, 'summary1.gif');"><img border=0 name=summaryIm2 src=summary1.gif></a><br>
<a href="details.htm" onMouseOver="switchIm(productIm2, 'prod2.gif');" onMouseOut="switchIm(productIm2, 'product1.gif');"><img src=product1.gif name=productIm2 border=0></a><br>
<a href="specs.htm" onMouseOver="switchIm(specsIm2, 'spec2.gif');" onMouseOut="switchIm(specsIm2, 'specs1.gif');"><img src=specs1.gif name=specsIm2 border=0></a><br>
</td>
<td width=2 bgcolor=#f4f400><spacer type=block width=2></td>
</tr>
</table>
</td></tr>

<tr><td bgcolor=#000000><img src=bmenub5.gif name=bottomLowIm></td></tr>

<tr><td bgcolor=#000000>
<p>&nbsp;</p>

</td></tr>
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!-- if extending the page length, increase as appropriate-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<tr><td height=540 bgcolor=#dbdae0>
&nbsp;
</td></tr>

</table>

<!------ end left side navigation bar -------->
</div>






<!------ beginning of content ---------------->

<div id=content>

<table rows=3 cols=4 cellspacing=0 cellpadding=0 border=0 width=772>

<tr>
<td width=112 height=0><!--extend this height to 80 to include the logo, while decreasing the height below by the same margin, and use the third column in this row for content--></td>
<td width=70 height=0></td>
<!--td width=474 height=0-->
<td width=530 height=0></td>
<td width=60 height=0></td>
</tr>

<tr>
<!-- if extending the page length, increase the height below by the required number of pixels-->
<td width=112 height=510>&nbsp;</td>
<td width=600 colspan=2 valign=top>
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--upper content starts here-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<span class=text>
<span class=text1><p>
Specifications
</p></span>
<p><span class=text2>
Java Support
</span></p>

<p>
&#149; Full support for the CLDC virtual machine and class librairies<br>
&#149; Complete adherence to the java virtual machine specification<br>
&#149; Floating point support is optional, depending upon the processor's floating point capabilities<br>
&#149; The built-in native method support can be extended to third-party applications in a platform-specific manner<br>
</p><span class=text2><p>
Advanced Process Model
</p></span><p>
An advanced process and threading model allows for complete separation of groups of threads into distinct memory spaces.  All resources allocated by an application are released when all threads of the application have terminated or have been forcibly terminated.  Such resources include the class table, string tables and static memory.  Static intializers are separately run for a class regardless of whether it has already been loaded by a separate application, and there are no shared event-handling threads, or sharing resources of any sort.  This allows the VM to remain active indefinitely without the continuous growth in memory required by most conventional java virtual machines.  It also allows the system to terminate an application immediately without corruption of the system as a whole.
</p>

<span class=text2><p>
Java Thread Stacks
</p></span><p>
Java thread stacks can be configured to be of fixed length or growable, whichever is optimal for the platform.  Growable stacks require larger stack frames and stack-checking.
</p>

<span class=text2><p>
Garbage Collection
</p></span><p>
The garbage collector is a high-performance, exact, mark and sweep collector.  The collector can be configured to run in its own thread concurrently with other threads (with priority and CPU time share specified), or whenever the processor is idle.  In both configurations the garbage collector will additionally step in seamlessly when there is a shortage of free memory.
</p>

<span class=text2><p>
JVM Performance Optimizations
</p></span><p>
&#149; numerous bytecodes are substituted by faster counterparts as the byte-code is executed - invokestatic, invokeinterface, invokevirtual, invokespecial, return, ireturn, areturn, lreturn, getstatic, putstatic, getfield, putfield, instanceof, checkcast, new, newarray, anewarray, multianewarray<br>
&#149; specialized bytecodes are used for some commonly used methods<br>
&#149; each loaded class and its associated structures can be stored in a single contiguous block of memory<br>
&#149; separation of primitive data types from object references provide faster garbage collection<br>
&#149; java registers (program counter, stack pointer, frame pointer and local variable pointer) are configurable as global variables, local variables inside the instruction loop, or machine registers, whichever is optimal for the platform<br>
&#149; direct threading and token threading platform-specific optimizations are optional
<br>

</p>


</span>
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--upper content ends here-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
</td>


<td>&nbsp;</td>
</tr>

<tr>
<td>&nbsp;<!--lower navigation bar goes here--></td>
<td>&nbsp;</td>
<td valign=top>
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--lower content starts here-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<span class=text>
<br>
<br>


<a name=expand>

<span class=text2><p>
Expansion of JVM for Further Optimization
</p></span><p>
Common methods of JVM expansion for platform-specific performance improvement have been accounted for in the design.
</p><span class=text3><p>
Hardware Acceleration
</p></span><p>
A processor whose native instructions mirror java instructions may execute some of the java bytecode directly.  Supported hardware instructions can be transferred from the JVM software instruction loop to the hardware by a processor specific mechanism.  In the reverse direction, the processor may jump to the kernel's JVM instruction handlers for bytecode instructions supported by software.
</p><span class=text3><p>
Just-in-Time Compilers (JIT)
</p></span><p>
Bundling in a native compiler with the JVM can enable JIT support.  In a manner similar to hardware acceleration, byte code execution can be transferred between the compiled code and the built-in interpreter.
</p>

<span class=text2><p>
Driver Development and O/S Peripherals
</p></span><p>

Any number of drivers may be added to the kernel in a straightforward manner, allowing for the specific and diverse requirements of an embedded or wireless system.  High performance and responsiveness of the JVM can be obtained due to the tight coupling of the JVM with the kernel.  In particular, java I/O classes can be primarily written in either native or java code. 
</p>

<span class=text2><p>
Romizing
</p></span><p>

Support for romizing is built-in, so that the base java class libraries (as well as any other self-contained java packages) can be romized, allowing for fast start-up times and reduced RAM requirements.

</p>



</span>
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--lower content ends here-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<td>&nbsp;</td>
</tr></table>


</div>

<!------ end of content ---------------->

</body>
</html>
